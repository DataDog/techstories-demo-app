name: CI

on:
  pull_request:
    branches: [main]
  push:
  workflow_dispatch:

env:
  DATABASE_URL: postgres://user:password@localhost:5432/db?schema=techstories
  NEXTAUTH_URL: http://localhost:3000
  POSTGRES_PASSWORD: password
  POSTGRES_USER: user
  POSTGRES_DB: db
  DD_API_KEY: ${{ secrets.DD_API_KEY }}
  DD_INSIDE_CI: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Cache Docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Cache Docker images using GitHub's cache
      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/docker-images
          key: ${{ runner.os }}-docker-images-${{ hashFiles('docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-images-
      
      # Load cached Docker images if they exist
      - name: Load Docker images from cache
        run: |
          if [ -d "/tmp/docker-images" ]; then
            for image in /tmp/docker-images/*.tar; do
              [ -e "$image" ] && docker load -i $image || true
            done
          fi
      
      # Start services using Docker Compose
      - name: Start Services
        run: |
          # Enable BuildKit
          export DOCKER_BUILDKIT=1
          export COMPOSE_DOCKER_CLI_BUILD=1
          
          # Start the services
          docker compose up -d
      
      # Save Docker images to cache
      - name: Save Docker images to cache
        if: always()
        run: |
          mkdir -p /tmp/docker-images
          docker images --format "{{.Repository}}:{{.Tag}}" | grep -v '<none>' | while read -r image; do
            docker save "$image" -o "/tmp/docker-images/$(echo $image | tr '/:' '_').tar"
          done
      
      # Cache Node modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install Dependencies
        run: npm ci
        
      - name: Prepare Database
        run: npm run db-prep
        
      - name: Run All Tests
        id: run_tests
        run: npm run test:ci
        env:
          NODE_ENV: test
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          
      - name: Stop Services
        if: always()
        run: docker compose down
